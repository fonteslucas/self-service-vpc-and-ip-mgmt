AWSTemplateFormatVersion: 2010-09-09

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: DynamoDB Configuration
        Parameters:
          - pDDBVPCSCIDRTableName
          - pDDBSupernetsTableName
      - Label:
          default: Lambda Configuration
        Parameters:
          - pS3CodeBucket
      - Label:
          default: Notification Configuration
        Parameters:
          - pFailureAlertEmail
      - Label:
          default: Organization Configuration
        Parameters:
          - pOrganizationsId
          - pRootOrganizationUnitId

Parameters:
  pDDBVPCSCIDRTableName:
    Type: String
    Default: ip-mgmt-vpc-cidrs
  pDDBSupernetsTableName:
    Type: String
    Default: ip-mgmt-supernets
  pS3CodeBucket:
    Type: String
    Default: ipam-mgmt-lfg
  pFailureAlertEmail:
    Type: String
  pOrganizationsId:
    Type: String
    Default: o-65r2o73zh8
  pRootOrganizationUnitId:
    Type: String
    Default: r-ccrp

Resources:
  rDynamoDBVPCSCIDRTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref pDDBVPCSCIDRTableName
      AttributeDefinitions: 
        - 
          AttributeName: "Cidr"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Cidr"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  rDynamoDBSupernetsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref pDDBSupernetsTableName
      AttributeDefinitions:
        - 
          AttributeName: "Cidr"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "Cidr"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  rLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: ip-mgmt-lambda-sns-access
          PolicyDocument:
            Statement:
              - Sid: GrantSnsAccess
                Effect: Allow
                Action:
                - sns:Publish
                Resource: !Ref rSnsAlerts
      Path: /

  rIpMgmtFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: index.lambda_handler
      Role: !GetAtt rLambdaRole.Arn
      Code: 
        S3Bucket: !Ref pS3CodeBucket
        S3Key: ipmgmt.zip
      Runtime: python3.8
      Timeout: 120
      DeadLetterConfig:
        TargetArn: !Ref rSnsAlerts
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref pDDBVPCSCIDRTableName
          SUPERNETSTABLE: !Ref pDDBSupernetsTableName
          SNS_TOPIC: !Ref rSnsAlerts

  rApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: An API Gateway to allow IP Management
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: ip-mgmt-api
      Policy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: execute-api:Invoke
          Resource: !Sub  arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
          Condition:
            ForAnyValue:StringLike:
              aws:PrincipalOrgPaths: !Sub ${pOrganizationsId}/${pRootOrganizationUnitId}/*

  rRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      RestApiId: !Ref rApiGatewayRestApi
      ValidateRequestParameters: true

  rApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt rApiGatewayRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref rApiGatewayRestApi

  rApiGatewayGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt rApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rIpMgmtFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref rApiGatewayResource
      RestApiId: !Ref rApiGatewayRestApi
      RequestValidatorId: !Ref rRequestValidator
      RequestParameters:
        method.request.querystring.Cidr: true

  rApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt rApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rIpMgmtFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref rApiGatewayResource
      RestApiId: !Ref rApiGatewayRestApi
      RequestValidatorId: !Ref rRequestValidator
      RequestParameters:
        method.request.querystring.AccountId: true
        method.request.querystring.prefix: true
        method.request.querystring.ProjectCode: true
        method.request.querystring.Reason: true
        method.request.querystring.Requestor: true
        method.request.querystring.Region: true
        method.request.querystring.Env: true

  rApiGatewayDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      HttpMethod: DELETE
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt rApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rIpMgmtFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref rApiGatewayResource
      RestApiId: !Ref rApiGatewayRestApi

  rApiGatewayUpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      HttpMethod: PUT
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt rApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rIpMgmtFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref rApiGatewayResource
      RestApiId: !Ref rApiGatewayRestApi
      RequestValidatorId: !Ref rRequestValidator
      RequestParameters:
        method.request.querystring.Cidr: true
        method.request.querystring.VpcId: true

  rApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref rApiGatewayRestApi
      Schema: {}

  rApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref rApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref rApiGatewayRestApi
      StageName: 'v0'

  rApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: rApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref rApiGatewayRestApi

  rApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt rIpMgmtFunction.Arn

  rSnsAlerts:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: !Ref pFailureAlertEmail
          Protocol: email

Outputs:
  oCidrMgmtDynamoDBSupernetsTable:
    Description: DynamoDB supernet table arn used by AWS Backup
    Value: !GetAtt rDynamoDBSupernetsTable.Arn
    Export:
      Name: CidrMgmtDynamoDBSupernetsTable
  oCidrMgmtDynamoDBSubnetsTable:
    Description: DynamoDB supnet table arn used by AWS Backup
    Value: !GetAtt rDynamoDBVPCSCIDRTable.Arn
    Export:
      Name: CidrMgmtDynamoDBVPCSCIDRTable
